package com.example.lessons.lesson12.homework

fun main() {
    val numbers = listOf(1, 2, 4, 44, -4, 0, 39, 6, 8, -2, 265, 17, 31, 46)
    val lettersnull = listOf("one", "two", "three", null)
    val collectionText = listOf("mom", "dad", "son")

    //Проверить, что размер коллекции больше 5 элементов.
 val a1 = numbers.size > 5

    //Проверить, что коллекция пустая
 val a2 = numbers.isEmpty()

    //Проверить, что коллекция не пустая
 val a3 = numbers.isNotEmpty()

    //Взять элемент по индексу или создать значение если индекса не существует
 val a4 = numbers.getOrElse(15) {100}

    //Собрать коллекцию в строку
 val a5 = numbers.joinToString()

    //Посчитать сумму всех значений
 val a6 = numbers.sum()

    //Посчитать среднее
 val a7 = numbers.average()

    //Взять максимальное число
 val a8 = numbers.maxOrNull()

    //Взять минимальное число
 val a9 = numbers.minOrNull()

    //Взять первое число или null
 val a10 = numbers.firstOrNull()

    //Проверить что коллекция содержит элемент
 val a11 = numbers.contains(44)

    //Отфильтровать коллекцию по диапазону 18-30
 val a12 = numbers.filter { it in 18..30 }

    //Выбрать числа, которые не делятся на 2 и 3 одновременно
 val a13 = numbers.filterNot { it % 2 == 0 && it % 3 == 0 }

    //Очистить текстовую коллекцию от null элементов
 val a14 = lettersnull.filterNotNull()

    //Преобразовать текстовую коллекцию в коллекцию длин слов
 val a15 = collectionText.map { it.length }

    //Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
 val a16 = collectionText.associate { it.reversed() to it.length }

    //Отсортировать список в алфавитном порядке
 val a17 = collectionText.sorted()

    //Взять первые 3 элемента списка
 val a18 = numbers.take(n = 3)

    //Распечатать квадраты элементов списка
 val a19 = numbers.forEach {
     println(it * it)
 }
    //Группировать список по первой букве слов
 val a20 = collectionText.groupBy { it.first() }

    //Очистить список от дублей
 val a21 = numbers.distinct()

    //Отсортировать список по убыванию
 val a22 = numbers.sortedDescending()

    //Взять последние 3 элемента списка
 val a23 = numbers.takeLast(n = 3)
    
    //Напиши функцию, которая принимает коллекцию чисел и возвращает строку
    // с характеристикой коллекции используя конструкцию when
    //
    //Если коллекция пустая - “Пусто”
    //Если количество элементов меньше пяти - “Короткая”
    //Если коллекция начинается с 0 - “Стартовая”
    //Если сумма всех чисел больше 10000 - “Массивная”
    //Если среднее значение равно 10 - “Сбалансированная”
    //Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
    //Если максимальное число меньше -10 - “Отрицательная”
    //Если минимальное число больше 1000 - “Положительная”
    //Если содержит одновременно числа 3 и 14 - “Пи***тая”
    //Иначе - “Уникальная”
    //Вызвать метод с данными, подходящими под каждую из веток

    fun a24(numbers: List<Int>) : String {
        return when {
            numbers.isEmpty() -> "Epmty"
            numbers.size<5 -> "Short"
            numbers.first() == 0 -> "Start"
            numbers.sum()>10000 -> "Huge"
            numbers.average() == 10 -> "Balanced"
            numbers.joinToString { ":" }.length == 20 -> "Glued"
            (numbers.maxOrNull()?:0) < -10 -> "Neg"
            numbers.minOrNull() > 10000 -> "Pos"
            numbers.contains(3) && numbers.contains(14) -> "Perfect"
                    }
        else -> "Unic"
    }

    //Напиши функцию, которая принимает список чисел и возвращает список чисел.
    //Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
    //Цель: Отфильтровать удовлетворительные оценки (>=60),
    //отсортировать оставшиеся по возрастанию и взять первые 3.
    //Вызывай методы обработки и фильтрации последовательно один из другого,
    //чтобы результат предыдущего метода являлся основой для следующего.

    fun a25(): List<Int> {
        return listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
            .filter { it >= 60 }
            .sorted()
            .take(n = 3)
    }

   //Напиши функцию, которая принимает список строк и возвращает
   //словарь с ключом - буквой и значением - списком строк.

    fun a26(): Map<Char, List<String>> {
        return listOf("Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра")
            .map { it.lowercase() }
            .groupBy { it.first() }

    }

    //Напиши функцию, которая принимает список чисел и возвращает
    //словарь с ключами - строками и значениями - список чисел.
    //Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
    //Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности
    // (“четные” и “нечетные”).

    fun a28(): Map<String, List<Int>> {
        return listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
            .distinct()
            .sortedDescending()
            .groupBy { if (it % 2 == 0)"even"
            else"odd"}
    }



}

